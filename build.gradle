/*
 * Copyright (C) Jerzy Błaszczyński, Marcin Szeląg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
 plugins {
	 id 'java-library'
	 id 'maven-publish'
 }

group = 'org.rulelearn'
version = '0.21.3'
ext.javadocDestinationDir = docsDir.getPath().replace('\\', '/') + '/javadoc' //add javadoc destination dir to project

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

dependencies {
 	//adding FastUtil library
	api('it.unimi.dsi:fastutil-core:8.5.4')
	
	//adding Gson library
	api('com.google.code.gson:gson:2.8.6')
	
	//adding uniVocity-parsers
	implementation('com.univocity:univocity-parsers:2.9.1')
	
	testImplementation('org.junit.jupiter:junit-jupiter-api:5.7.1')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.7.1')
	
	testImplementation('org.mockito:mockito-core:3.9.0')
	
	//For running JUnit 4 based tests:
	//testCompile('junit:junit:4.12')
    //testRuntime('org.junit.vintage:junit-vintage-engine:4.12.2')
	
	// To avoid compiler warnings about @API annotations in JUnit code
	testCompileOnly('org.apiguardian:apiguardian-api:1.1.1') //licenced under Apache License 2.0; https://github.com/apiguardian-team/apiguardian
	
	// To use Log4J's LogManager
	testRuntimeOnly('org.apache.logging.log4j:log4j-core:2.14.1') //licenced under Apache License 2.0; https://logging.apache.org/log4j/2.x/
	testRuntimeOnly('org.apache.logging.log4j:log4j-jul:2.14.1') //licenced under Apache License 2.0; https://logging.apache.org/log4j/2.x/	
	
	// https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream
	testImplementation('com.thoughtworks.xstream:xstream:1.4.16')
}

tasks.named('compileJava') {
  if (project.properties['org.gradle.java.home'] == null ) {
  	if (System.getenv('JAVA_HOME') != null) {
  		println '[note@build.gradle/compileJava] Property org.gradle.java.home is not set - Gradle assumes JAVA_HOME environmental variable to point to Java JDK directory'
  		println "[note@build.gradle/compileJava] JAVA_HOME=${System.getenv('JAVA_HOME')}"
  		println ''
  		
  		options.fork = true
  		options.forkOptions.executable = "${System.getenv('JAVA_HOME')}\\bin\\javac".replace('\\', '/')
  		options.compilerArgs << '-Xlint:unchecked'
		options.compilerArgs << '-deprecation'
  	}
  }
}

tasks.named('compileTestJava') {
  if (project.properties['org.gradle.java.home'] == null ) {
  	if (System.getenv('JAVA_HOME') != null) {
  		println '[note@build.gradle/compileTestJava] Property org.gradle.java.home is not set - Gradle assumes JAVA_HOME environmental variable to point to Java JDK directory'
  		println "[note@build.gradle/compileTestJava] JAVA_HOME=${System.getenv('JAVA_HOME')}"
  		println ''
  		
  		options.fork = true
  		options.forkOptions.executable = "${System.getenv('JAVA_HOME')}\\bin\\javac".replace('\\', '/')
  	}
  }
}

tasks.named('test') {
	description 'Runs all tests except integration ones' //runs faster
	useJUnitPlatform {
		excludeTags 'integration'
		includeEngines 'junit-jupiter'
	}
	systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'
}

tasks.register('integrationTest', Test) { //runs slower
	description 'Runs only integration tests'
	group 'verification'
	useJUnitPlatform {
		includeTags 'integration'
		includeEngines 'junit-jupiter'
	}
	systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'
	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

tasks.withType(Test).configureEach { //print test results for each task of type Test
	println "Max parallel forks of $it: " + maxParallelForks
	afterSuite { desc, result ->
		if (!desc.parent) { // will match the outermost suite
			println "Summary of performed tests: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
		}
	}
}

tasks.named('javadoc') {
	options.author = true
	options.addStringOption('charset', 'UTF-8')
	options.addStringOption('encoding', 'UTF-8');
	destinationDir = new File(javadocDestinationDir)
	//options.addBooleanOption('html5', true)
	if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
	
	if (project.properties['org.gradle.java.home'] == null ) {
		if (System.getenv('JAVA_HOME') != null) {
			println '[note@build.gradle/javadoc] Property org.gradle.java.home is not set - Gradle assumes JAVA_HOME environmental variable to point to Java JDK directory'
  			println "[note@build.gradle/javadoc] JAVA_HOME=${System.getenv('JAVA_HOME')}"
  			println ''
		
	 		setExecutable("${System.getenv('JAVA_HOME')}\\bin\\javadoc".replace('\\', '/'))
	 	}
    }
    
    if (project.properties['generate.test.javadoc'] == 'true') {
    	println '[note@build.gradle/javadoc] Generating documentation also for test classes'
    	println ''
    	
    	classpath += sourceSets.test.compileClasspath
    	source += sourceSets.test.allJava
    } else {
    	println '[note@build.gradle/javadoc] Skipping generation of documentation for test classes'
    	println ''
    }
}

tasks.named('jar') {
	manifest {
		attributes('Implementation-Title': project.name,
				   'Implementation-Version': project.version)
	}
}

tasks.register('refresh') {
	dependsOn build, integrationTest, javadoc //build internally depends on test
	integrationTest.mustRunAfter build
	
	description 'Performs all tasks, including integration tests'
	group 'aggregate'
}

tasks.register('all') {
	dependsOn clean, refresh
	
	refresh.mustRunAfter clean
	
	description 'Cleans and performs all tasks, including integration tests'
	group 'aggregate'
}

tasks.register('javadocJar', Jar) {
	dependsOn tasks.named('javadoc')
    archiveClassifier = 'javadoc'
    from project.javadocDestinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
			artifact javadocJar //TODO: change to avoid confuguration of javadocJar (when supported by Gradle)
            pom {
                name = 'ruleLearn library'
                description = 'Open source library for learning rule models from decision examples and applying these models to classify or rank new examples'
                url = 'https://github.com/ruleLearn/rulelearn'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                developers {
                    developer {
                        id = 'marcin-szelag'
                        name = 'Marcin Szelag'
                        email = 'marcin.szelag@cs.put.poznan.pl'
                    }
                    developer {
                        id = 'jurek-blaszczynski'
                        name = 'Jurek Błaszczyński'
                        email = 'jurek.blaszczynski@cs.put.poznan.pl'
                    }
                }
                scm {
                    connection = 'https://github.com/ruleLearn/rulelearn'
                    developerConnection = 'https://github.com/ruleLearn/rulelearn'
                    url = 'https://github.com/ruleLearn/rulelearn'
                }
            }
        }
    }
}
