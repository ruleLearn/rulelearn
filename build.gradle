/*
 * Copyright (C) Jerzy Błaszczyński, Marcin Szeląg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2' //adds junitPlatformTest task
	}
}

apply plugin: 'java-library'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven-publish'

group = 'org.rulelearn'
version = '0.15.0'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

dependencies {
 	//adding FastUtil library
	api("it.unimi.dsi:fastutil:8.1.1")
	//runtime("it.unimi.dsi:fastutil:8.1.1")
	
	//adding Gson library
	api('com.google.code.gson:gson:2.8.2')
	//runtime ('com.google.code.gson:gson:2.8.2')
	
	//adding uniVocity-parsers
	implementation('com.univocity:univocity-parsers:2.5.9')
	//runtime ('com.univocity:univocity-parsers:2.5.9')
	
	testImplementation("org.junit.jupiter:junit-jupiter-api:5.0.2")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.0.2")
	
	testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.0.2")
	
	testImplementation("org.mockito:mockito-core:2.23.4")
	
	//For running JUnit 4 based tests:
	//testCompile("junit:junit:4.12")
    //testRuntime("org.junit.vintage:junit-vintage-engine:4.12.2")
	
	// To avoid compiler warnings about @API annotations in JUnit code
	testCompileOnly('org.apiguardian:apiguardian-api:1.0.0') //licenced under Apache License 2.0; https://github.com/apiguardian-team/apiguardian
	
	// To use Log4J's LogManager
	testRuntimeOnly("org.apache.logging.log4j:log4j-core:2.10.0") //licenced under Apache License 2.0; https://logging.apache.org/log4j/2.x/
	testRuntimeOnly("org.apache.logging.log4j:log4j-jul:2.10.0") //licenced under Apache License 2.0; https://logging.apache.org/log4j/2.x/	
}

compileJava {
  if (project.properties["org.gradle.java.home"] == null ) {
  	if (System.getenv('JAVA_HOME') != null) {
  		println "[note@build.gradle/compileJava] Property org.gradle.java.home is not set - Gradle assumes JAVA_HOME environmental variable to point to Java JDK directory"
  		println "[note@build.gradle/compileJava] JAVA_HOME=${System.getenv('JAVA_HOME')}"
  		println ""
  		
  		options.fork = true
  		options.forkOptions.executable = "${System.getenv('JAVA_HOME')}\\bin\\javac".replace("\\", "/")
  		options.compilerArgs << "-Xlint:unchecked"
  	}
  }
}

compileTestJava {
  if (project.properties["org.gradle.java.home"] == null ) {
  	if (System.getenv('JAVA_HOME') != null) {
  		println "[note@build.gradle/compileTestJava] Property org.gradle.java.home is not set - Gradle assumes JAVA_HOME environmental variable to point to Java JDK directory"
  		println "[note@build.gradle/compileTestJava] JAVA_HOME=${System.getenv('JAVA_HOME')}"
  		println ""
  		
  		options.fork = true
  		options.forkOptions.executable = "${System.getenv('JAVA_HOME')}\\bin\\javac".replace("\\", "/")
  	}
  }
}

junitPlatform {
	// platformVersion '1.0.2'
	filters {
		engines {
			// include 'junit-jupiter', 'junit-vintage'
			// exclude 'custom-engine'
		}
		tags {
			// include 'fast'
			//exclude 'integration'
		}
		// includeClassNamePattern '.*Test'
	}
	enableStandardTestTask true
	// reportsDir file('build/test-results/junit-platform') // this is the default
	logManager 'org.apache.logging.log4j.jul.LogManager'
}

javadoc {
	options.author = true
	options.addStringOption("charset", "UTF-8")
	options.addStringOption("encoding", "UTF-8");
	//options.addBooleanOption('html5', true)
	if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
	
	if (project.properties["org.gradle.java.home"] == null ) {
		if (System.getenv('JAVA_HOME') != null) {
			println "[note@build.gradle/javadoc] Property org.gradle.java.home is not set - Gradle assumes JAVA_HOME environmental variable to point to Java JDK directory"
  			println "[note@build.gradle/javadoc] JAVA_HOME=${System.getenv('JAVA_HOME')}"
  			println ""
		
	 		setExecutable("${System.getenv('JAVA_HOME')}\\bin\\javadoc".replace("\\", "/"))
	 	}
    }
    
    if (project.properties["generate.test.javadoc"] == "true") {
    	println "[note@build.gradle/javadoc] Generating documentation also for test classes"
    	println ""
    	
    	classpath += sourceSets.test.compileClasspath
    	source += sourceSets.test.allJava
    } else {
    	println "[note@build.gradle/javadoc] Skipping generation of documentation for test classes"
    	println ""
    }
}

jar {
	manifest {
		attributes('Implementation-Title': project.name,
				   'Implementation-Version': project.version)
	}
}

task all(dependsOn: ["junitPlatformTest", "jar", "javadoc"], description: "Performs all tasks") {
	group 'aggregate'
	description 'Run tests, generate javadoc, build jar'
	
	doLast {
		println("Building ruleLearn completed.")
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact javadocJar
            pom {
                name = 'ruleLearn library'
                description = 'Open source library for learning rule models from decision examples and applying these models to classify or rank new examples'
                url = 'https://github.com/ruleLearn/rulelearn'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                developers {
                    developer {
                        id = 'marcin-szelag'
                        name = 'Marcin Szelag'
                        email = 'marcin.szelag@cs.put.poznan.pl'
                    }
                    developer {
                        id = 'jurek-blaszczynski'
                        name = 'Jurek Błaszczyński'
                        email = 'jurek.blaszczynski@cs.put.poznan.pl'
                    }
                }
                scm {
                    connection = 'https://github.com/ruleLearn/rulelearn'
                    developerConnection = 'https://github.com/ruleLearn/rulelearn'
                    url = 'https://github.com/ruleLearn/rulelearn'
                }
            }
        }
    }
}
